name: Build a Docker image for amd64 and arm64, and publish it to a container registry

on:
  workflow_call:
    inputs:
      container_registry:
        description: "Docker container registry to authenticate with"
        type: string
        default: "ghcr.io"

      image_name:
        description: "Name to assign the built image"
        type: string
        default: ${{ github.repository }}

      dockerfile:
        description: "Dockerfile to build the image from"
        type: string
        default: "Dockerfile"

      tag_repo_with_version:
        description: "Flag for whether to tag the calling repo with the current version number (only applies if this is being called from the default branch)"
        type: boolean
        default: true

      docker_build_args:
        description: "Any build arguments to be passed to the Docker build action"
        type: string
        default: ""

    secrets:
      APT_SERVER_NAME:
        description: "Domain name of the apt server to authenticate with"
        required: true

      APT_SIGNING_PUBKEY:
        description: "Public key of the apt server to be accessed"
        required: true

      APT_RETRIEVE_USER:
        description: "User to authenticate to the apt server with"
        required: true

      APT_RETRIEVE_TOKEN:
        description: "Token to authenticate to the apt server with"
        required: true

      DOCKER_BUILD_SECRETS:
        description: "Any secrets to be passed to the Docker build action"
        required: false

    outputs:
      image_id:
        description: "Image ID of the built image"
        value: ${{ jobs.build-and-push-image.outputs.image_id }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version number
        working-directory: .
        id: extract-versions
        run: |
          echo "PKG_VERSION=$(cat version)" >> "$GITHUB_ENV"
        shell: bash

      - name: Create version tag
        if: |
          inputs.tag_repo_with_version &&
          github.ref_name == github.event.repository.default_branch
        uses: actions/github-script@v5
        with:
          script: |
            const {PKG_VERSION} = process.env   
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${PKG_VERSION}`,
              sha: context.sha
            })

      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ inputs.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ inputs.container_registry }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=v${{ env.PKG_VERSION }},priority=1000,enable={{is_default_branch}}
            # Since default branch is main not master, we need to override what latest looks for
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha

      # These steps use [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) and [docker/setup-buildx-action](https://github.com/docker/setup-buildx-action) to set up the docker engine for building the image on multiple platforms
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.10.0
        with:
          context: .
          file: ./${{ inputs.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.docker_build_args }}
          secrets: |
            "apt_pubkey=${{ secrets.APT_SIGNING_PUBKEY }}"
            "apt_auth_conf=
              machine ${{ secrets.APT_SERVER_NAME }}
              login ${{ secrets.APT_RETRIEVE_USER }} 
              password ${{ secrets.APT_RETRIEVE_TOKEN }}"
            ${{ secrets.DOCKER_BUILD_SECRETS }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ inputs.container_registry }}/${{ inputs.image_name}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

    outputs:
      image_id: ${{ steps.push.outputs.imageid }}